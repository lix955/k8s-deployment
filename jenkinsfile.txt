pipeline {
    agent {
        kubernetes {
            yaml """
apiVersion: v1
kind: Pod
metadata:
  name: build-pod-${BUILD_NUMBER}
spec:
  containers:
  - name: git
    image: alpine/git:latest
    command: ['sleep', 'infinity']
    volumeMounts:
    - name: workspace
      mountPath: /home/jenkins/agent/workspace
  - name: kubectl
    image: bitnami/kubectl:1.24
    command: ['sleep', 'infinity']
    volumeMounts:
    - name: workspace
      mountPath: /home/jenkins/agent/workspace
  volumes:
  - name: workspace
    emptyDir: {}
"""
        }
    }

    environment {
        GITEA_REPO = "http://gitea.gitea.svc.cluster.local/lix/My_dockerfile.git"
        HARBOR_DOMAIN = "harbor.harbor.svc.cluster.local"
        HARBOR_PROJECT = "test-k8s"
        IMAGE_NAME = "${HARBOR_DOMAIN}/${HARBOR_PROJECT}/${env.JOB_NAME}"
        IMAGE_TAG = "build-${BUILD_NUMBER}"
        K8S_DEPLOYMENT = "app-deployment"
        K8S_NAMESPACE = "default"
    }

    stages {
        // 阶段1：克隆代码
        stage('Fetch Code') {
            steps {
                container('git') {
                    sh 'rm -rf .git*'
                    withCredentials([usernamePassword(
                        credentialsId: 'gitea', 
                        usernameVariable: 'GITEA_USER', 
                        passwordVariable: 'GITEA_PWD'
                    )]) {
                        sh '''
                            git config --global --add safe.directory /home/jenkins/agent/workspace/test-new
                            AUTH_REPO=$(echo ${GITEA_REPO} | sed "s|http://|http://${GITEA_USER}:${GITEA_PWD}@|")

                            git clone ${AUTH_REPO} . || {
                                echo "git clone failed, trying alternative approach..."
                                git init
                                git remote add origin ${AUTH_REPO}
                                git fetch origin
                                git checkout main
                            }

                            echo "=== Code Content ==="
                            ls -la
                            echo "=== Dockerfile Content ==="
                            cat Dockerfile || echo "Dockerfile not found"
                            git log -1 --oneline
                        '''
                    }
                }
            }
        }

        // 阶段2：动态添加Kaniko容器并构建镜像
        stage('Build Image with Kaniko') {
            steps {
                script {
                    // 动态Patch Pod添加Kaniko容器
                    def patchCmd = """
                    kubectl patch pod build-pod-${BUILD_NUMBER} --type='json' -p='[
                        {
                            "op": "add",
                            "path": "/spec/containers/-",
                            "value": {
                                "name": "kaniko",
                                "image": "aisuko/kaniko-project-executor:latest",
                                "args": [
                                    "--dockerfile=/workspace/Dockerfile",
                                    "--context=dir:///workspace",
                                    "--destination=${IMAGE_NAME}:${IMAGE_TAG}",
                                    "--verbosity=info"
                                ],
                                "volumeMounts": [
                                    {
                                        "name": "workspace",
                                        "mountPath": "/workspace"
                                    },
                                    {
                                        "name": "kaniko-config",
                                        "mountPath": "/kaniko/.docker"
                                    }
                                ]
                            }
                        }
                    ]'
                    """

                    // 添加Kaniko配置卷
                    def volumePatch = """
                    kubectl patch pod build-pod-${BUILD_NUMBER} --type='json' -p='[
                        {
                            "op": "add",
                            "path": "/spec/volumes/-",
                            "value": {
                                "name": "kaniko-config",
                                "secret": {
                                    "secretName": "harbor-regcred"
                                }
                            }
                        }
                    ]'
                    """

                    sh volumePatch
                    sh patchCmd

                    // 等待Kaniko容器启动并完成构建
                    sh """
                    kubectl wait --for=condition=Ready pod/build-pod-${BUILD_NUMBER} --timeout=300s
                    echo "=== Kaniko Build Logs ==="
                    kubectl logs -f build-pod-${BUILD_NUMBER} -c kaniko
                    """

                    // 检查构建结果
                    sh """
                    kubectl get pod build-pod-${BUILD_NUMBER} -o jsonpath='{.status.containerStatuses[?(@.name=="kaniko")].state.terminated.exitCode}'
                    """
                }
            }
        }

        // 阶段3：部署到Kubernetes
        stage('Deploy to Kubernetes') {
            steps {
                container('kubectl') {
                    script {
                        // 读取部署模板文件（如果存在）
                        def deployYaml = """
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ${K8S_DEPLOYMENT}
  namespace: ${K8S_NAMESPACE}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: ${K8S_DEPLOYMENT}
  template:
    metadata:
      labels:
        app: ${K8S_DEPLOYMENT}
    spec:
      containers:
      - name: ${K8S_DEPLOYMENT}
        image: ${IMAGE_NAME}:${IMAGE_TAG}
        ports:
        - containerPort: 80
---
apiVersion: v1
kind: Service
metadata:
  name: ${K8S_DEPLOYMENT}-service
  namespace: ${K8S_NAMESPACE}
spec:
  selector:
    app: ${K8S_DEPLOYMENT}
  ports:
  - port: 80
    targetPort: 80
"""

                        // 应用部署
                        sh """
                        cat <<EOF | kubectl apply -f -
${deployYaml}
EOF
                        """

                        // 检查部署状态
                        sh """
                        kubectl rollout status deployment/${K8S_DEPLOYMENT} -n ${K8S_NAMESPACE} --timeout=120s
                        echo "=== Deployment Status ==="
                        kubectl get deployment ${K8S_DEPLOYMENT} -n ${K8S_NAMESPACE}
                        echo "=== Pod Status ==="
                        kubectl get pods -n ${K8S_NAMESPACE} -l app=${K8S_DEPLOYMENT}
                        """
                    }
                }
            }
        }
    }

    post {
        always {
            // 清理资源
            sh "kubectl delete pod build-pod-${BUILD_NUMBER} || true"

            // 构建结果通知
            script {
                if (currentBuild.result == 'SUCCESS') {
                    echo "构建成功！镜像地址：${IMAGE_NAME}:${IMAGE_TAG}"
                } else {
                    echo "构建失败，请检查日志"
                }
            }
        }
    }
}